/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<Integer> input;

    public App(List<Integer> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {
        int result = 0;
        for (int i=0; i<input.size();i++) {
            int row = input.get(i);
            if (BigInteger.valueOf(row).isProbablePrime(10)) {
                result += i*row;
            }
        }
        return result;
    }

    public Integer getSolutionPart2() {
        int result = 0;
        for (int i=0; i<input.size();i++) {
            int row = input.get(i);
            if (!BigInteger.valueOf(row).isProbablePrime(10)) {
                if (i%2==0) {
                    result += row;
                } else {
                    result -= row;
                }
            }
        }
        return result;
    }

    public static void main(String[] args) throws IOException {
        List<Integer> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Integer> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map(Integer::parseInt)
                .collect(Collectors.toList());
    }
}
