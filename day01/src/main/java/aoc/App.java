/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<Integer> input;

    public App(List<Integer> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {
        int increases = -1;
        int previousDepth = 0;
        for (int depth : input) {
            if (depth > previousDepth) increases++;
            previousDepth = depth;
        }
        return increases;
    }

    public Integer getSolutionPart2() {
        int increases = -1;
        int previousDepth = 0;
        for (int i = 2; i < input.size(); i++) {
            int depth = 0;
            for (int j = 0; j < 3; j++) {
                depth += input.get(i - j);
            }
            if (depth > previousDepth) increases++;
            previousDepth = depth;
        }
        return increases;
    }

    public static void main(String[] args) throws IOException {
        List<Integer> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Integer> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map(Integer::parseInt)
                .collect(Collectors.toList());
    }
}
